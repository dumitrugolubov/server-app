from flask import Flask, request, jsonify
from flask_cors import CORS  # –î–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è CORS (–∑–∞–ø—Ä–æ—Å—ã —Å –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–æ–≤)
import openai  # –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI API
from dotenv import load_dotenv  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
import os
from PyPDF2 import PdfReader  # –î–ª—è —á—Ç–µ–Ω–∏—è PDF-—Ñ–∞–π–ª–æ–≤
from PIL import Image  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
import io

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∫–ª—é—á —É–∫–∞–∑–∞–Ω –≤ .env

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
CORS(app)  # –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤

@app.route('/')
def home():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return "Welcome to GPT-powered server! üöÄ", 200

@app.route('/api/chat', methods=['POST'])
def chat():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞ —Å GPT"""
    try:
        data = request.json
        print("Received data:", data)

        if not data or 'messages' not in data:
            return jsonify({"error": "Invalid request format. 'messages' is required."}), 400

        response = openai.ChatCompletion.create(
            model="o1-preview",
            messages=data['messages']
        )
        print("Raw OpenAI response:", response)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–ª–∏–µ–Ω—Ç—É
        if 'choices' in response and len(response['choices']) > 0:
            message = response['choices'][0]['message']['content']
            return jsonify({"message": message})
        else:
            return jsonify({"error": "Invalid OpenAI response format."}), 500
    except Exception as e:
        print("Error:", str(e))
        return jsonify({"error": str(e)}), 500


@app.route('/api/upload', methods=['POST'])
def upload():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)"""
    try:
        if 'file' not in request.files:
            return jsonify({"error": "No file uploaded"}), 400

        file = request.files['file']

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
        if file.filename.endswith('.pdf'):
            pdf_reader = PdfReader(file)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text()
            return jsonify({"text": text})

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        elif file.filename.lower().endswith(('.png', '.jpg', '.jpeg')):
            image = Image.open(io.BytesIO(file.read()))
            return jsonify({"info": f"Image size: {image.size}"})

        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        else:
            return jsonify({"error": "Unsupported file format"}), 400
    except Exception as e:
        print("Error:", str(e))  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(debug=True)
